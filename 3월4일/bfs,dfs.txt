BFS와 DFS는 탐색 알고리즘으로 많은 양의 데이터 중에서 원하는
데이터를 찾을때 사용
스택: 선입 후출 ex)프링글스
큐: 선입 선출 ex)줄서기
우선순위 큐: 일반적으로 힙을 이용하여 구현 배열또는 연결리스트 가능
->힙은 최악의 경우라도 시간 복잡도가 O(logN)
  리스트와 연결리스트의 경우 구현 방법은 쉽다. 하지만 치명적인 단점이 존재한다.
  리스트의 경우 data가 많아 질 경우 데이터를 우선순위에 기반해 전체 비교를 거쳐 알맞은 자리를 찾고,
  그 자리에 넣기 위해 전체 자료를 밀어내야한다.
  연결리스트의 경우 또한 data가 많아 질 경우 노드간의 연결을 거쳐 모든 노드에 접근하여 비교연산을 해야한다.
  이는 비용이 매우 크다.
  따라서 우리는 힙을 이용해 우선순위 큐를 구현한다.

힙= 완전 이진트리 마지막 레벨을 제외하고 꽉
최대힙: 부모 >= 자식
최소힙: 자식 <= 부모
remove,append,pop


모든 노드를 방문해야 할 때 두가지 경우 모두 가능
-DFS는 
깊이우선탐색 특정 노드로 까지의 데이터를 저장해야할때
미로찾기를 예를 들면 가다가 막히면 바로 전으로 돌아가
다른 길로 가야할때

-BFS는 
너비우선탐색 큐 인접한 노드를 먼저 탐색 최단거리
조금 인물관계도 느낌?